exit
exception
n
exit
n
c
exit
auth
auth.email
n
auth
n
c
n
c
exit
exception
n
return_user.email_required?
n
exit
exception
n
return_user.email_required?
n
c
n
exception
n
return_user.email_required?
n
exit
return_user.email_required?
return_user
n
exit
exception
n
exit
return_user.email_required?
return_user
n
exit
User.email_required?
n
exit
User.email_required?
auth.email.blank?
auth
n
exit
exception
n
exit
exception
n
exit
exception
n
exit
exception
exeption
n
exit
exception
n
exit
params
exit
params
exit
params
exit
auth
c
auth
c
n
auth
c
exit
provider
auth
n
c
auth
n
c
n
c
n
c
exit
user
user.id
user
self
user
n
auth
User.all
@user
n
@user
User.all
c
User.all
c
n
user
self.where(uid: auth.uid, provider: auth.provider, user_id: user.id).first
auth
return_user.authentications
return_user.autentications
return_user.autentication
return_user
n
return_user
n
exit
user
exception
n
User.where(email: auth.info.email).exists?
auth
n
c
exit
params
c
n
return_user
n
auth.uid
return_user
n
return_user
n
self.where(email: auth.info.email)
self
params
auth.provider
auth.uid
auth.name
auth
n
params
exit
user.profile
user
c
params
paramas
exit
@profile
user.profile
user
exit
@profile
exit
user.profile
user
c
n
@profile
n
response.status
n
@profile
c
params
exit
Profile.all
current_user.following
current_user.followed
current_user.following_user
current_user
exit
params
exit
params
exit
params
exit
user.profile
user
exit
@profile.user.itenaries.count
@profile.user.itenaries
@profile.user.bookmarked_itenary.count
@profile.user.bookmarked_itenary
@profile.user
@profile
c
n
@profile
exit
User.last.profile
User.last
User.first.profile
User.first
Profile.all
Profile
params
@profile
c
profile
c
n
e
n
user.profile
user
c
@itenary
c
@itenary
exit
@itenary.id
c
@itenary.id
@itenary
c
n
item
n
itenary
exit
self.day.to_i+1
self.day.to_i
self.day.to_int
self.day.to_num
self.day
exit
Item.last
self
c
self
c
e
n
exception
n
exit
a = PDF::Inspector::Text.analyze page.driver.response.body.render
a = PDF::Inspector::Text.analyze page.driver.response.render
a = PDF::Inspector::Text.analyze page.driver.render
a.strings
a
a = PDF::Inspector::Text.analyze page.driver.response.body
page.driver.response.body
page.driver.response
page.driver
page.current_path
page.current_scope.title
page.current_scope
